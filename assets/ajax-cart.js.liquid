/*============================================================================
Ajax the add to cart experience by revealing it in a side drawer
Plugin Documentation - http://shopify.github.io/Timber/#ajax-cart
(c) Copyright 2015 Shopify Inc. Author: Carson Shold (@cshold). All Rights Reserved.

This file includes:
- Basic Shopify Ajax API calls
- Ajax cart plugin

This requires:
- jQuery 1.8+
- handlebars.min.js (for cart template)
- modernizer.min.js
- snippet/ajax-cart-template.liquid

Customized version of Shopify's jQuery API
(c) Copyright 2009-2015 Shopify Inc. Author: Caroline Schnapp. All Rights Reserved.
==============================================================================*/
if ((typeof ShopifyAPI) === 'undefined') { ShopifyAPI = {}; }

/*============================================================================
API Helper Functions
==============================================================================*/
function attributeToString(attribute) {
  if ((typeof attribute) !== 'string') {
    attribute += '';
    if (attribute === 'undefined') {
      attribute = '';
    }
  }
  return jQuery.trim(attribute);
};

/*============================================================================
API Functions
==============================================================================*/
ShopifyAPI.onCartUpdate = function(cart) {
  console.info('There are now ' + cart.item_count + ' items in the cart.');
};

ShopifyAPI.updateCartNote = function(note, callback) {
  var params = {
    type: 'POST',
    url: '/cart/update.js',
    data: 'note=' + attributeToString(note),
    dataType: 'json',
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      }
      else {
        ShopifyAPI.onCartUpdate(cart);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};

ShopifyAPI.updateEngravingNote = function(note, callback) {
  var params = {
    type: 'POST',
    url: '/cart/update.js',
    data: {
      attributes: {
        engravingText: attributeToString(giftMessage)
      }
    },
    dataType: 'json',
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      }
      else {
        ShopifyAPI.onCartUpdate(cart);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};

ShopifyAPI.updateGiftMessage = function(note, callback) {
  var params = {
    type: 'POST',
    url: '/cart/update.js',
    data: {
      attributes: {
        giftMessage: attributeToString(note)
      }
    },
    dataType: 'json',
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      }
      else {
        ShopifyAPI.onCartUpdate(cart);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};

ShopifyAPI.onError = function(XMLHttpRequest, textStatus) {
  var data = eval('(' + XMLHttpRequest.responseText + ')');
  if (!!data.message) {
    alert(data.message + '(' + data.status  + '): ' + data.description);
  }
};

/*============================================================================
POST to cart/add.js returns the JSON of the cart
- Allow use of form element instead of just id
- Allow custom error callback
==============================================================================*/
ShopifyAPI.addItemFromForm = function(form, callback, errorCallback) {
  var params = {
    type: 'POST',
    url: '/cart/add.js',
    data: jQuery(form).serialize(),
    dataType: 'json',
    success: function(line_item) {
      if ((typeof callback) === 'function') {
        callback(line_item, form);
      }
      else {
        ShopifyAPI.onItemAdded(line_item, form);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      if ((typeof errorCallback) === 'function') {
        errorCallback(XMLHttpRequest, textStatus);
      }
      else {
        ShopifyAPI.onError(XMLHttpRequest, textStatus);
      }
    }
  };
  jQuery.ajax(params);
};

ShopifyAPI.addItem = function(variant_id, quantity, properties, callback) {
  var data = {
    id: variant_id,
    quantity: quantity,
    properties: properties
  }

  var params = {
    type: 'POST',
    url: '/cart/add.js',
    data:  data,
    dataType: 'json',
    success: function(line_item) {
      if ((typeof callback) === 'function') {
        callback(line_item);
      }
      else {
        ShopifyAPI.onItemAdded(line_item);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};


ShopifyAPI.addItems = function(items, callback) {
  var params = {
    type: 'POST',
    url: '/cart/add.js',
    data: items,
    dataType: 'json',
    success: function(line_item) {
      if ((typeof callback) === 'function') {
        callback(line_item);
      }
      else {
        ShopifyAPI.onItemAdded(line_item);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};

// Get from cart.js returns the cart in JSON
ShopifyAPI.getCart = function(callback) {
  jQuery.getJSON('/cart.js', function (cart, textStatus) {
    if ((typeof callback) === 'function') {
      callback(cart);
    }
    else {
      ajaxCart.cartUpdateCallback(cart);
    }
  });
};

// POST to cart/change.js returns the cart in JSON
ShopifyAPI.changeItem = function(variant_id, quantity, line, callback) {
  var params = {
    type: 'POST',
    url: '/cart/change.js',
    data:  'quantity='+quantity+'&id='+variant_id,
    dataType: 'json',
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      } else {
        ShopifyAPI.onCartUpdate(cart);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};

// POST to cart/change.js returns the cart in JSON
ShopifyAPI.updateItems = function(updates, callback) {
  var params = {
    type: 'POST',
    url: '/cart/update.js',
    data:  updates,
    dataType: 'json',
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      } else {
        ShopifyAPI.onCartUpdate(cart);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};

ShopifyAPI.clearCart = function(){
  var params = {
    type: 'POST',
    url: '/cart/clear.js',
    success: function(cart) {
      ShopifyAPI.onCartUpdate(cart);
    },
    error: function(XMLHttpRequest, textStatus) {
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
}

ShopifyAPI.onItemAdded = function(item){
  ajaxCart.itemAddedCallback(item)
}


var countryCodesInEurope = ["AT", "BE", "BG", "HR", "CY", "CZ", "DK", "EE", "FI", "FR", "DE", "GR", "HU", "IE", "IT", "LV", "LT", "LU", "MT", "NL", "PO", "PT", "RO", "SK", "SI", "ES", "SE", "AL", "AD", "AM", "BY", "BA", "FO", "GE", "GI", "IS", "IM", "XK", "LI", "MK", "MD", "MC", "ME", "NO", "RU", "SM", "RS", "CH", "TR", "UA", "GB", "VA"];
var months = {
  January: 1,
  February: 2,
  March: 3,
  April: 4,
  May: 5,
  June: 6,
  July: 7,
  August: 8,
  September: 9,
  October: 10,
  November: 11,
  December: 12
}

/*============================================================================
Ajax Shopify Add To Cart
==============================================================================*/
/* For IE11 */
$.ajaxSetup({ cache: false });

var ajaxCart = (function(module, $) {

  'use strict';

  // Public functions
  var init, loadCart;

  // Private general variables
  var settings, $body, onCartPage;

  // Private plugin variables
  var $formContainer, $form, $addToCart, $cartCountSelector, $cartCostSelector, $cartContainer, $drawerContainer;

  var customerCountry, getCustomerCountry;

  // Private functions
  var updateCountPrice, formOverride, itemAddedCallback, itemErrorCallback, cartUpdateCallback, buildCart, getPromotions, cartCallback, adjustCart, adjustCartCallback, handleQuantityChange, createQtySelectors, qtySelectors, validateQty, removeItem, removePreorderItems, addSpiceSpoonToCart;

  // Spice Spoon Variant ID ==> 30985799663698
  var spiceSpoonID = 30985799663698;


  /*============================================================================
  Initialise the plugin and define global options
  ==============================================================================*/
  init = function (options) {
    getCustomerCountry();

    onCartPage = window.location.pathname === "/cart";

    // Default settings
    settings = {
      formContainerSelector: "#AddToCartForm",
      formSelector: 'form[action^="/cart/add"]',
      cartContainer: '.js-cartContainer',
      addToCartSelector: '.addToCart',
      cartCountSelector: null,
      cartCostSelector: null,
      moneyFormat: '${{amount}}',
      disableAjaxCart: false,
      enableQtySelectors: onCartPage
    };

    // Override defaults with arguments
    $.extend(settings, options);

    // Select DOM elements
    $formContainer     = $(settings.formContainerSelector);
    $form              = $(settings.formSelector);
    $cartContainer     = $(settings.cartContainer);
    $addToCart         = $(settings.addToCartSelector);
    $cartCountSelector = $(settings.cartCountSelector);
    $cartCostSelector  = $(settings.cartCostSelector);

    // General Selectors
    $body = $('body');

    // Setup ajax quantity selectors on the any template if enableQtySelectors is true
    if (settings.enableQtySelectors) {
      qtySelectors();
    }

    $cartContainer.on('click', '.ajaxcart__qty-adjust', handleQuantityChange);
    $cartContainer.on('click', '.js-remove-preorders', removePreorderItems);

    // Take over the add to cart form submit action if ajax enabled
    if (!settings.disableAjaxCart) {
      formOverride();
    }

    // Run this function in case we're using the quantity selector outside of the cart
    adjustCart();
    removeItem();
  };

  getCustomerCountry = function(){
    var url = '/browsing_context_suggestions.json'
    $.ajax(url).then(function(json){
      // do whatever you want with the data here
      if (json && json.detected_values && json.detected_values.country) {
        customerCountry = json.detected_values.country.handle;
      }
    })
  }

  loadCart = function () {
    $body.addClass('drawer--is-loading');
    ShopifyAPI.getCart(cartUpdateCallback);
  };

  updateCountPrice = function (cart) {
    if ($cartCountSelector) {
      $cartCountSelector.html(cart.item_count).removeClass('hidden-count');

      if (cart.item_count === 0) {
        $cartCountSelector.addClass('hidden-count');
      }
    }
    if ($cartCostSelector) {
      $cartCostSelector.html(Shopify.formatMoney(cart.total_price, settings.moneyFormat));
    }
  };

  formOverride = function () {
    $(document).on('submit', 'form[action^="/cart/add"]', function(evt) {
      evt.preventDefault();

      // Add class to be styled if desired
      $addToCart.removeClass('is-added').addClass('is-adding');

      // Remove any previous quantity errors
      $('.qty-error').remove();

      ShopifyAPI.addItemFromForm(evt.target, addSpiceSpoonToCart, itemErrorCallback);
    });

    $('.js-article-submit').on('click', function(e){
      e.preventDefault();
      var checkboxes = $('.js-recipe-checkbox:checked');
      var items = {items: []};
      checkboxes.each( function(index, checkbox){
        var item = {quantity: 1, id: checkbox.value};
        items.items.push(item);
      })
      ShopifyAPI.addItems(items, itemAddedCallback)
    })
  };

  addSpiceSpoonToCart = function (product) {
    if ($('#spice-spoon-checkbox').is(':checked') ) {
      console.log('Spice spoon is checked!');
      ShopifyAPI.addItem(spiceSpoonID, 1)
    } else {
      itemAddedCallback(product)
    }
  };

  itemAddedCallback = function (product) {
    $addToCart.removeClass('is-adding').addClass('is-added');

    ShopifyAPI.getCart(cartUpdateCallback);
  };

  itemErrorCallback = function (XMLHttpRequest, textStatus) {
    var data = eval('(' + XMLHttpRequest.responseText + ')');
    $addToCart.removeClass('is-adding is-added');

    if (!!data.message) {
      if (data.status == 422) {
        $formContainer.after('<div class="errors qty-error">'+ data.description +'</div>')
      }
    }
  };

  cartUpdateCallback = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);
    buildCart(cart);
    //window.ShopifyCart = cart;
  };

  removeItem = function(){
    $cartContainer.on('click', '.js-remove-from-cart', function(e){
      var id = $(e.target).attr('data-id');
      var line = $(e.target).attr('data-line');

      ShopifyAPI.changeItem(id, 0, line, function(cart){
        var $row = $(e.target).parents('.ajaxcart__product');
        $row.addClass('is-removed');

        //Make sure the remove item animation is done
        setTimeout(function(){
          cartUpdateCallback(cart);
        }, 500);

      });

    });
  };

  removePreorderItems = function(){
    var updates = {}

    $('.js-preorder-item').each(function(index, item){
      var $this = $(item);
      var id = $(item).data('id');

      updates[id] = 0

      $this.addClass('is-removed');
    })

    ShopifyAPI.updateItems({updates: updates}, cartUpdateCallback);
  }


  var spoon = 31985354440786;
  var magnetTrio = 31985351360594;
  var sticker = 32150387228754;
  var powderedSpices = [32122998194258, 29483866914881, 17738076815460,  30982564610130, 32122950778962, 32122956120146, 29523210272833, 29523210305601, 29523210338369, 32135529070674, 32135529037906, 32124805709906, 32124805677138, 32124805644370];
  //turmeric small, turmeric med, turmeric large, powdered chili, powdered chili M, powdered chili L, turmeric 2, turmeric 10, turmeric 50, big trio, small trio, subscription turmeric 2, subscription turmeric 10, subscription turmeric 50

  buildCart = function (cart) {
    // Start with a fresh cart div
    var $cartCount = $('.js-cart-count');
    $cartCount.text(cart.item_count);

    if (cart.item_count > 0) {
      $cartCount.addClass('active')
    } else {
      $cartCount.removeClass('active')
    }

    $cartContainer.empty();
    var rechargeInCart = false
    // var cartHasPowderedSpice = false;
    var cartHasOnlyPromos = true;
    var hasCard = false;
    // var totalUnderFourty = cart.total_price < 4000;
    // var totalUnderFifty = cart.total_price < 5000;
    // var powderQuantity = 0;
    // var trioSpice = [32135529070674, 32135529037906]; //big trio, small trio
    // var notTrioPowderedSpices = [32122998194258, 29483866914881, 17738076815460,  30982564610130, 32122950778962, 32122956120146, 29523210272833, 29523210305601, 29523210338369, 32124805709906, 32124805677138, 32124805644370, 32150387228754];
    var dabba = 32891260305490;
    var bundlerId = 6087228915883;
    var preorderMonth = ""

    // $.each(cart.items, function(index, cartItem) {
    //   if (powderedSpices.includes(cartItem.variant_id)){
    //     cartHasPowderedSpice = true;
    //   }
    //   tally number of spoons to add to cart
    //   if (notTrioPowderedSpices.includes(cartItem.variant_id)){
    //     powderQuantity += 1;
    //   } else if ( trioSpice.includes(cartItem.variant_id) ){
    //     powderQuantity += 2;
    //   }
    // })

    // Handlebars.js cart layout
    var items = [],
        item = {},
        // promotions = getPromotions(),
        promo = {},
        data = {},
        source = $("#CartTemplate").html(),
        template = Handlebars.compile(source),
        totalPrice = 0,
        hasPreorders = false,
        hasReadys = false;

    // Add each item to our handlebars.js data
    $.each(cart.items, function(index, cartItem) {
      var itemAdd = cartItem.quantity + 1,
          itemMinus = cartItem.quantity - 1,
          itemQty = cartItem.quantity;
      var itemShouldRender = true;
      var metafields = {};

      var url = "/products/" + cartItem.handle + "?view=metafields&variant=" + cartItem.variant_id;

      $.ajax({
        url: url,
        async: false,
        success: function(data) {
          var json = JSON.parse(data);
          metafields = json;
        }
      })

      /* Hack to get product image thumbnail
      *   - If image is not null
      *     - Remove file extension, add _small, and re-add extension
      *     - Create server relative link
      *   - A hard-coded url of no-image
      */
      if (cartItem.image != null){
        var prodImg = cartItem.image.replace(/(\.[^.]*)$/, "_210x$1").replace('http:', '');
      } else {
        var prodImg = "//cdn.shopify.com/s/images/themes/product-1.png";
      }

      var prodName = cartItem.product_title,
          prodVariation = cartItem.variant_title;

      if (prodVariation == 'Default Title') {
        prodVariation = false;
      }

      if (cartItem.product_type !== "Cart Promo") {
        cartHasOnlyPromos = false;
      }

      var bundlerProperties = []

      var price = Shopify.formatMoney(cartItem.price, settings.moneyFormat);

      if (cartItem.product_id === bundlerId || cartItem.title === "Build Your Own Trio" || cartItem.title.includes("Masala Dabba") || cartItem.product_id === dabba) {
        Object.keys(cartItem.properties).forEach(function(key){
          if (!key.includes("_") && !key.includes("price")) {
            var isTrio = cartItem.title === "Build Your Own Trio" || cartItem.product_id === bundlerId;
            bundlerProperties.push({ byot: isTrio, title: key, quantity: cartItem.properties[key] })
          } else if (key.includes("price")) {
            price = cartItem.properties[key];
          }
        })
      } else {
        price = Shopify.formatMoney(cartItem.price, settings.moneyFormat)
      }

      var unformattedPrice = (parseFloat(price.replace("$", "")) * 100) * cartItem.quantity;

      totalPrice += unformattedPrice;

      var isPreorder = metafields['product']['pre-order'] === 1;
      if (!isPreorder) {
        isPreorder = metafields['variant']['pre-order'] === 1;
      }

      var restockDate = metafields.product.restock_date
      if (!restockDate) {
        restockDate = metafields.variant.restock_date;
      }

      if (isPreorder) {
        hasPreorders = true;
        if (months[preorderMonth] && months[restockDate] && months[preorderMonth] > months[restockDate]) {
        } else {
          preorderMonth = restockDate;
        }
        if (restockDate) {
          var shippingMessage = restockDate + " Preorder";
        } else {
          var shippingMessage = "Preorder";
        }
      } else {
        var shippingMessage = "Ready To Ship"
        hasReadys = true;
      }

      // Create item's data object and add to 'items' array
      item = {
        id: cartItem.key,
        variantId: cartItem.variant_id,
        line: index + 1,
        url: cartItem.url,
        img: prodImg,
        name: prodName,
        variation: prodVariation,
        description: cartItem.product_description,
        attributes: cart.attributes,
        itemAdd: itemAdd,
        itemMinus: itemMinus,
        itemQty: itemQty,
        price: price,
        priceZero: cartItem.price <= "0",
        vendor: cartItem.vendor,
        properties: cartItem.properties,
        promotion: cartItem.product_type === "Cart Promo",
        dabba: cartItem.variant_id === dabba,
        bundlerProperties: bundlerProperties,
        preorder: isPreorder,
        shippingMessage: shippingMessage,
        giftMessage: cart.attributes.giftMessage
      };


      if (item.properties && item.properties.shipping_interval_frequency) {
        rechargeInCart = true;
      }

      //remove magnet from cart if price is less than $50
      // if (item.id === magnetTrio && totalUnderFifty){
      //   var line = item.line;
      //   itemShouldRender = false;
      //   ShopifyAPI.changeItem(magnetTrio, 0, line);
      // }

      //remove sticker from cart if price is less than $40
      // if ( item.id === sticker && totalUnderFourty ){
      //   var line = item.line;
      //   itemShouldRender = false;
      //   ShopifyAPI.changeItem(sticker, 0, line);
      // }

      // remove spoon from cart if there are no powdered spices
      // if (!cartHasPowderedSpice && item.id === spoon ){
      //  var line = item.line;
      //  //itemShouldRender = false;
      //  ShopifyAPI.changeItem(spoon, 0, line);
      // }

      // if( item.id === spoon){
      //  var line = item.line;
      //  ShopifyAPI.changeItem(spoon, powderQuantity, line);
      // }

      if (itemShouldRender){
        items.push(item);
      }
    });

    if (cartHasOnlyPromos) {
      ShopifyAPI.clearCart();
      items = [];
    }

    //Determine whether the promo is in the cart or not
    // var promoInFooter = function(promo){
    //   var inFooter = true;
    //   $.each(cart.items, function(index, cartItem){
    //     //if promo variant ID matches item in cart
    //     if(cartItem.variant_id === promo.variants[0].id){
    //       inFooter = false;
    //     }
    //   })
    //   return inFooter;
    // }

    // create an array of promo objects in footer
    // var promoFilter = promotions.filter(function(promo){
    //   var wholesaleItems = [31067999109202]; //sticker, talkers
    //   var cartHasPowderedSpice = false;
    //   $.each(cart.items, function(index, cartItem){
    //     if (powderedSpices.includes(cartItem.variant_id)){
    //       cartHasPowderedSpice = true;
    //     }
    //   })

    //   if(promoInFooter(promo)){
    //     if (cart.total_price < 0 ){
    //       return false //show nothing
    //     } else if ( cart.total_price > 0 ){
    //       if (promo.variants[0].id === sticker && cart.total_price < 4000){
    //         return false // hide sticker if total is less than $40
    //       }
    //       if (promo.variants[0].id === magnetTrio && cart.total_price < 5000) {
    //         return false //hide magnet if total is less than $50
    //       } else if (!cartHasPowderedSpice && promo.variants[0].id === spoon ){
    //         return false // hide spoons unless cart has powdered spice
    //       }
    //       else{
    //         return true
    //       }
    //     }
    //   }
    // })

    // send cart promo object data to footer
    // var promoMap = promoFilter.map(function(promo){
    //   return {
    //     title: promo.title,
    //     variantId: promo.variants[0].id,
    //     description: promo.body_html,
    //     img: promo.images[0].src,
    //     quantity: promo.quantity,
    //     product: promo
    //   }
    // });

    if (customerCountry && customerCountry !== "US") {
      if (countryCodesInEurope.includes(customerCountry)) {
        shippingMessage = "If you choose to ship internationally, you authorize Diaspora Co. to import the goods on your behalf. You agree that Diaspora Co. may delegate the obligation to import the goods on your behalf to a customs broker. As a buyer, you will pay the taxes & duties associated with the import in addition to the purchase price of the goods."
      } else {
        shippingMessage = "Be warned! Your shipping cost does not include import duties and fees that may apply. Customers are responsible for all international duties and should check with local agencies for rates."
      }
    } else {
      var shippingMessage = ""
    }

    // Gather all cart data and add to DOM
    data = {
      items: items,
      // promotions: promoMap,
      attributes: cart.attributes,
      shippingMessage: shippingMessage,
      giftMessage: cart.attributes.giftMessage,
      note: cart.note,
      checked: cart.items.find(function(item){
        return item.variant_id === 29581924859969;
      }),
      totalPrice: Shopify.formatMoney(totalPrice, settings.moneyFormat),
      preorderMonth: preorderMonth,
      hasPreorderAndReady: hasReadys && hasPreorders
    }

    $cartContainer.append(template(data));

    if(location.pathname !== "/cart") {
      cartCallback(cart);
    }

    //recharge
    if (rechargeInCart) {
      $('.js-checkout').addClass('js-recharge-redirect');
    } else {
      $('.js-checkout').removeClass('js-recharge-redirect');
    }
  };


  getPromotions = function(){
    var promotions = [];

    jQuery.ajax('/products.json', {
      async: false,
      method: "GET",
      accepts: "json",
      dataType: "json",
      success: function(json){
        promotions = json.products.filter(function(product){
          return product.product_type === "Cart Promo";
        })
      }
    })

    return promotions;
  };

  cartCallback = function(cart) {
    $body.removeClass('drawer--is-loading');
    $body.trigger('ajaxCart.afterCartLoad', cart);


  };

  var toggleNote = function (e) {
    var card = $('.js-card');
    var checked = card ? card.attr('checked') : false;
    var messages = $('.js-gift-toggle');
    checked
    ? messages.addClass('is-active')
    : messages.removeClass('is-active');
  };

  var toggleProduct = function (e) {
    var cardProduct = 29581924859969;
    var item = $('.ajaxcart__row[data-variant-id="'+ cardProduct +'"]');
    var line = item.data('line');
    line = parseInt(line);
    var checked = e.target.checked;

    if (checked) {
      ShopifyAPI.addItem(cardProduct, 1, {}, adjustCartCallback);
    } else {       //removes card
      ShopifyAPI.changeItem(cardProduct, 0, line, adjustCartCallback);
    }
  }

  var addCard = function (){
    var card = $('.js-card');
    var messages = $('.js-message');
    var cardProduct = 29581924859969;
    var item = $('.ajaxcart__row[data-variant-id="'+ cardProduct +'"]');


    var hasCard = item.length ? true : false;
    if (card) {
      hasCard
      ? card.attr('checked', 'checked')
      : card.attr('checked', 'false');
    }

    $(document).on('change', '.js-card', toggleProduct);
  };

  addCard();
  toggleNote();


  adjustCart = function () {
    // Delegate all events because elements reload with the cart

    // Add or remove from the quantity
    $body.on('click', '.ajaxcart__qty-adjust', function() {
      var el = $(this),
          id = el.data('id'),
          line = el.data('line'),
          qtySelector = el.siblings('.ajaxcart__qty-num'),
          qty = parseInt(qtySelector.val().replace(/\D/g, ''));

      var qty = validateQty(qty);

      // Add or subtract from the current quantity
      if (el.hasClass('ajaxcart__qty--plus')) {
        qty = qty + 1;
      } else {
        qty = qty - 1;
        if (qty <= 0) qty = 0;
      }

      // If it has a data-id, update the cart.
      // Otherwise, just update the input's number
      if (id) {
        updateQuantity(id, qty, line);
      } else {
        qtySelector.val(qty);
      }
    });

    // Update quantity based on input on change
    $body.on('change', '.ajaxcart__qty-num', function() {
      var el = $(this),
          id = el.data('id'),
          line = el.data('line'),
          qty = parseInt(el.val().replace(/\D/g, ''));

      var qty = validateQty(qty);

      // Only update the cart via ajax if we have a variant ID to work with
      if (id) {
        updateQuantity(id, qty, line);
      }
    });

    // Highlight the text when focused
    $body.on('focus', '.ajaxcart__qty-adjust', function() {
      var el = $(this);
      setTimeout(function() {
        el.select();
      }, 50);
    });

    // Save note anytime it's changed
    $body.on('change', 'textarea[name="attributes[giftMessage]"]', function() {
      var newNote = $(this).val();
      // Update the cart note in case they don't click update/checkout
      ShopifyAPI.updateGiftMessage(newNote, function(cart) {});
    });

    // Save engraving note anytime it's changed
    $body.on('change', '.custom-engraving', function() {
      var newNote = $(this).val();

      // Update the cart note in case they don't click update/checkout
      ShopifyAPI.updateEngravingNote(newNote, function(cart) {});
    });
  };

  adjustCartCallback = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);

    // Reprint cart on short timeout so you don't see the content being removed
    setTimeout(function() {
      ShopifyAPI.getCart(buildCart);
    }, 150)
  };

  handleQuantityChange = function(e) {
    var id = $(e.target).data('id');
    var line = $(e.target).data('line');
    var qty = $(e.target).data('qty');
    ShopifyAPI.changeItem(id, qty, line, adjustCartCallback);

  }

  createQtySelectors = function() {
    // If there is a normal quantity number field in the ajax cart, replace it with our version
    if ($('input[type="number"]', $cartContainer).length) {
      $('input[type="number"]', $cartContainer).each(function() {
        var el = $(this),
            currentQty = el.val();

        var itemAdd = currentQty + 1,
            itemMinus = currentQty - 1,
            itemQty = currentQty;

        var source   = $("#AjaxQty").html(),
            template = Handlebars.compile(source),
            data = {
              id: el.data('id'),
              itemQty: itemQty,
              itemAdd: itemAdd,
              itemMinus: itemMinus
            };

        // Append new quantity selector then remove original
        el.after(template(data)).remove();
      });
    }

    // If there is a regular link to remove an item, add attributes needed for ajax
    if ($('a[href^="/cart/change"]', $cartContainer).length) {
      $('a[href^="/cart/change"]', $cartContainer).each(function() {
        var el = $(this).addClass('ajaxcart__remove');
      });
    }
  };

  qtySelectors = function() {
    // Change number inputs to JS ones, similar to ajax cart but without API integration.
    // Make sure to add the existing name and id to the new input element
    var numInputs = $('input[type="number"]');

    if (numInputs.length) {
      numInputs.each(function() {
        var el = $(this),
            currentQty = el.val(),
            inputName = el.attr('name'),
            inputId = el.attr('id');

        var itemAdd = currentQty + 1,
            itemMinus = currentQty - 1,
            itemQty = currentQty;

        var source   = $("#JsQty").html(),
            template = Handlebars.compile(source),
            data = {
              id: el.data('id'),
              itemQty: itemQty,
              itemAdd: itemAdd,
              itemMinus: itemMinus,
              inputName: inputName,
              inputId: inputId
            };

        // Append new quantity selector then remove original
        el.after(template(data)).remove();
      });

      // Setup listeners to add/subtract from the input
      $('.js-qty__adjust').on('click', function() {
        var el = $(this),
            id = el.data('id'),
            line = el.data('line'),
            qtySelector = el.siblings('.js-qty__num'),
            qty = parseInt(qtySelector.val().replace(/\D/g, ''));

        var qty = validateQty(qty);

        // Add or subtract from the current quantity
        if (el.hasClass('js-qty__adjust--plus')) {
          qty = qty + 1;
        } else {
          qty = qty - 1;
          if (qty <= 1) qty = 1;
        }

        //Update quantity via ajax, without showing the ajaxacrt
        updateQuantity(id, qty, line, true);
        // Update the input's number
        qtySelector.val(qty);
      });
    }
  };

  validateQty = function (qty) {
    if((parseFloat(qty) == parseInt(qty)) && !isNaN(qty)) {
      // We have a valid number!
    } else {
      // Not a number. Default to 1.
      qty = 1;
    }
    return qty;
  };

  //Moved updateQuantity into the top-level namespace for this module, so that
  //we can have the ability to update cart total on the cart page via ajax.

  function updateQuantity(id, qty, line, disableShowCart) {
    // Add activity classes when changing cart quantities
    var row = $('.ajaxcart__row[data-id="' + id + '"]').addClass('is-loading');

    if (qty === 0) {
      row.parent().addClass('is-removed');
    }

    // Slight delay to make sure removed animation is done
    setTimeout(function() {
      if (disableShowCart){
        ShopifyAPI.changeItem(id, qty, line);
      }
      else {
        ShopifyAPI.changeItem(id, qty, line, adjustCartCallback);
      }

    }, 250);
  }

  module = {
    init: init,
    load: loadCart,
    cartUpdateCallback: cartUpdateCallback,
    itemAddedCallback: itemAddedCallback
  };

  if (location.pathname === "/cart" ) {
  $(document).ready(function(){
    ShopifyAPI.getCart(buildCart);
  });
  }

  return module;

}(ajaxCart || {}, jQuery));
